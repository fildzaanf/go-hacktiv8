basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  request.CommentRequest:
    properties:
      message:
        example: this is a sample comment message
        type: string
    type: object
  request.MediaSocialRequest:
    properties:
      media_social_url:
        example: https://www.instagram.com/fildzaanf
        type: string
      name:
        example: instagram
        type: string
    type: object
  request.PhotoRequest:
    properties:
      caption:
        example: this is example caption photo
        type: string
      photo_url:
        example: http://example.com/photo.jpg
        type: string
      title:
        example: title photo
        type: string
    type: object
  request.UserLoginRequest:
    properties:
      email:
        example: hanisahfildza@gmail.com
        type: string
      password:
        example: password123456789
        type: string
    type: object
  request.UserNewPasswordRequest:
    properties:
      confirm_password:
        example: password123456789
        type: string
      password:
        example: password123456789
        type: string
    type: object
  request.UserRegisterRequest:
    properties:
      confirm_password:
        example: password123456789
        type: string
      email:
        example: hanisahfildza@gmail.com
        type: string
      password:
        example: password123456789
        type: string
    type: object
  request.UserSendOTPRequest:
    properties:
      email:
        example: hanisahfildza@gmail.com
        type: string
    type: object
  request.UserUpdateProfileRequest:
    properties:
      age:
        example: 20
        type: integer
      confirm_password:
        example: password123456789
        type: string
      email:
        example: hanisahfildza@gmail.com
        type: string
      fullname:
        example: hanisah fildza annafisah
        type: string
      password:
        example: password123456789
        type: string
      username:
        example: fildzaanf
        type: string
    type: object
  request.UserVerifyOTPRequest:
    properties:
      email:
        example: hanisahfildza@gmail.com
        type: string
      otp:
        example: "7777"
        type: string
    type: object
  response.CommentResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      message:
        type: string
      photo_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  response.MediaSocialResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      media_social_url:
        type: string
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  response.PhotoResponse:
    properties:
      caption:
        type: string
      comments:
        items:
          $ref: '#/definitions/response.CommentResponse'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  response.UserLoginResponse:
    properties:
      age:
        type: integer
      comments:
        items:
          $ref: '#/definitions/response.CommentResponse'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      media_socials:
        items:
          $ref: '#/definitions/response.MediaSocialResponse'
        type: array
      photos:
        items:
          $ref: '#/definitions/response.PhotoResponse'
        type: array
      role:
        type: string
      token:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  response.UserRegisterResponse:
    properties:
      age:
        type: integer
      comments:
        items:
          $ref: '#/definitions/response.CommentResponse'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      media_socials:
        items:
          $ref: '#/definitions/response.MediaSocialResponse'
        type: array
      photos:
        items:
          $ref: '#/definitions/response.PhotoResponse'
        type: array
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  response.UserResponse:
    properties:
      age:
        type: integer
      comments:
        items:
          $ref: '#/definitions/response.CommentResponse'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      media_socials:
        items:
          $ref: '#/definitions/response.MediaSocialResponse'
        type: array
      photos:
        items:
          $ref: '#/definitions/response.PhotoResponse'
        type: array
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  responses.TErrorResponse:
    properties:
      meta:
        $ref: '#/definitions/responses.TResponseMeta'
    type: object
  responses.TResponseMeta:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.TSuccessResponse:
    properties:
      meta:
        $ref: '#/definitions/responses.TResponseMeta'
      results: {}
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is a simple service for media social
  termsOfService: http://swagger.io/terms/
  title: MyGram API
  version: "1.0"
paths:
  /accounts/login:
    post:
      consumes:
      - application/json
      description: Login user with provided email and password
      parameters:
      - description: User login credentials
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Login user
      tags:
      - accounts
  /accounts/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided data
      parameters:
      - description: User data for registration
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Register a new user
      tags:
      - accounts
  /comments:
    get:
      description: Retrieve all comments
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get all comments
      tags:
      - comments
  /comments/{comment_id}:
    delete:
      description: Delete comment by comment ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Delete comment by ID
      tags:
      - comments
    get:
      description: Retrieve comment details by comment ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get comment by ID
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update comment details by comment ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      - description: Comment details
        in: body
        name: commentRequest
        required: true
        schema:
          $ref: '#/definitions/request.CommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Update comment by ID
      tags:
      - comments
  /comments/{photo_id}:
    post:
      consumes:
      - application/json
      description: Create a new comment with the provided comment data
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo ID
        in: path
        name: photo_id
        required: true
        type: string
      - description: Comment data
        in: body
        name: commentRequest
        required: true
        schema:
          $ref: '#/definitions/request.CommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Create a new comment
      tags:
      - comments
  /media-social:
    get:
      description: Retrieve all media social entries
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MediaSocialResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get all media social entries
      tags:
      - media-social
    post:
      consumes:
      - application/json
      description: Create a new media social entry with the provided data
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Media Social data
        in: body
        name: mediaSocialRequest
        required: true
        schema:
          $ref: '#/definitions/request.MediaSocialRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.MediaSocialResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Create a new media social entry
      tags:
      - media-social
  /media-social/{medsos_id}:
    delete:
      description: Delete media social entry by media social ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Media Social ID
        in: path
        name: medsos_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Delete media social entry by ID
      tags:
      - media-social
    get:
      description: Retrieve media social entry details by media social ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Media Social ID
        in: path
        name: medsos_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MediaSocialResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get media social entry by ID
      tags:
      - media-social
    put:
      consumes:
      - application/json
      description: Update media social entry details by media social ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Media Social ID
        in: path
        name: medsos_id
        required: true
        type: string
      - description: Media Social details
        in: body
        name: mediaSocialRequest
        required: true
        schema:
          $ref: '#/definitions/request.MediaSocialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MediaSocialResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Update media social entry by ID
      tags:
      - media-social
  /password/change-password:
    post:
      consumes:
      - application/json
      description: Set new password after verifying OTP
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: New password details
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserNewPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Set new password
      tags:
      - passwords
  /password/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiate password reset process by sending OTP to user's email
      parameters:
      - description: User email for sending OTP
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserSendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Forgot password
      tags:
      - passwords
  /password/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP sent to user's email for password reset
      parameters:
      - description: User email and OTP for verification
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserVerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verification successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Verify OTP
      tags:
      - passwords
  /photos:
    get:
      description: Retrieve all photos
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PhotoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get all photos
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Create a new photo with the provided photo data
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo data
        in: body
        name: photoRequest
        required: true
        schema:
          $ref: '#/definitions/request.PhotoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Create a new photo
      tags:
      - photos
  /photos/{photo_id}:
    delete:
      description: Delete photo by photo ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo ID
        in: path
        name: photo_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Delete photo by ID
      tags:
      - photos
    get:
      description: Retrieve photo details by photo ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo ID
        in: path
        name: photo_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get photo by ID
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update photo details by photo ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo ID
        in: path
        name: photo_id
        required: true
        type: string
      - description: Photo details
        in: body
        name: photoRequest
        required: true
        schema:
          $ref: '#/definitions/request.PhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PhotoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Update photo by ID
      tags:
      - photos
  /users:
    get:
      description: Retrieve all users
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get all users
      tags:
      - users
  /users/{user_id}:
    delete:
      description: Delete user by user ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Retrieve user details by user ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details by user ID
      parameters:
      - description: JWT access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: User details
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.TErrorResponse'
      summary: Update user by ID
      tags:
      - users
swagger: "2.0"
